var securityScheme = new OpenApiSecurityScheme()
{
    Name = "Authorization",
    Type = SecuritySchemeType.ApiKey,
    Scheme = "Bearer",
    BearerFormat = "JWT",
    In = ParameterLocation.Header,
    Description = "JSON Web Token based security",
};

var securityReq = new OpenApiSecurityRequirement()
{
    {
        new OpenApiSecurityScheme
        {
            Reference = new OpenApiReference
            {
                Type = ReferenceType.SecurityScheme,
                Id = "Bearer"
            }
        },
        new string[] {}
    }
};

var contact = new OpenApiContact()
{
    Name = "Mohamad Lawand",
    Email = "hello@mohamadlawand.com",
    Url = new Uri("http://www.mohamadlawand.com")
};

var license = new OpenApiLicense()
{
    Name = "Free License",
    Url = new Uri("http://www.mohamadlawand.com")
};

var info = new OpenApiInfo()
{
    Version = "v1",
    Title = "Minimal API - JWT Authentication with Swagger demo",
    Description = "Implementing JWT Authentication in Minimal API",
    TermsOfService = new Uri("http://www.example.com"),
    Contact = contact,
    License = license
};

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(o =>
{
    o.SwaggerDoc("v1", info);
    o.AddSecurityDefinition("Bearer", securityScheme);
    o.AddSecurityRequirement(securityReq);
});

app.UseSwagger();
app.UseSwaggerUI();

// builder.Services.AddAuthentication(o =>
// {
//     o.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
//     o.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
//     o.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
// }).AddJwtBearer(o =>
// {
//     o.TokenValidationParameters = new TokenValidationParameters
//     {
//        ValidIssuer = builder.Configuration["Jwt:Issuer"],
//         ValidAudience = builder.Configuration["Jwt:Audience"],
//         IssuerSigningKey = new SymmetricSecurityKey
//             (Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"])),
//         ValidateIssuer = true,
//         ValidateAudience = true,
//         ValidateLifetime = false,
//         ValidateIssuerSigningKey = true
//     };
// });

// builder.Services.AddAuthorization();
// builder.Services.AddEndpointsApiExplorer();


app.UseAuthentication();
app.UseAuthorization();




// app.MapPost("/security/getToken", [AllowAnonymous] (UserDto user) =>
// {

//     if (user.UserName=="admin@mohamadlawand.com" && user.Password=="P@ssword")
//     {
//         var issuer = builder.Configuration["Jwt:Issuer"];
//         var audience = builder.Configuration["Jwt:Audience"];
//         var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]));
//         var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

//         // Now its ime to define the jwt token which will be responsible of creating our tokens
//         var jwtTokenHandler = new JwtSecurityTokenHandler();

//         // We get our secret from the appsettings
//         var key = Encoding.ASCII.GetBytes(builder.Configuration["Jwt:Key"]);

//         // we define our token descriptor
//             // We need to utilise claims which are properties in our token which gives information about the token
//             // which belong to the specific user who it belongs to
//             // so it could contain their id, name, email the good part is that these information
//             // are generated by our server and identity framework which is valid and trusted
//         var tokenDescriptor = new SecurityTokenDescriptor
//         {
//             Subject = new ClaimsIdentity(new []
//             {
//                 new Claim("Id", "1"),
//                 new Claim(JwtRegisteredClaimNames.Sub, user.UserName),
//                 new Claim(JwtRegisteredClaimNames.Email, user.UserName),
//                 // the JTI is used for our refresh token which we will be convering in the next video
//                 new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
//             }),
//             // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
//             // but since this is a demo app we can extend it to fit our current need
//             Expires = DateTime.UtcNow.AddHours(6),
//             Audience = audience,
//             Issuer = issuer,
//             // here we are adding the encryption alogorithim information which will be used to decrypt our token
//             SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
//         };

//         var token = jwtTokenHandler.CreateToken(tokenDescriptor);

//         var jwtToken = jwtTokenHandler.WriteToken(token);

//         return Results.Ok(jwtToken);
//     }
//     else
//     {
//         return Results.Unauthorized();
//     }
// });


// app.MapGet("/items", [Authorize] async (ApiDbContext db) =>
// {
//     return await db.Items.ToListAsync();
// });

// app.MapPost("/items", [Authorize] async (ApiDbContext db, Item item) => {
//     if( await db.Items.FirstOrDefaultAsync(x => x.Id == item.Id) != null)
//     {
//         return Results.BadRequest();
//     }

//     db.Items.Add(item);
//     await db.SaveChangesAsync();
//     return Results.Created( $"/Items/{item.Id}",item);
// });

// app.MapGet("/items/{id}", [Authorize] async (ApiDbContext db, int id) =>
// {
//     var item = await db.Items.FirstOrDefaultAsync(x => x.Id == id);

//     return item == null ? Results.NotFound() : Results.Ok(item);
// });

// app.MapPut("/items/{id}", [Authorize] async (ApiDbContext db, int id, Item item) =>
// {
//     var existItem = await db.Items.FirstOrDefaultAsync(x => x.Id == id);
//     if(existItem == null)
//     {
//         return Results.BadRequest();
//     }

//     existItem.Title = item.Title;
//     existItem.IsCompleted = item.IsCompleted;

//     await db.SaveChangesAsync();
//     return Results.Ok(item);
// });

// app.MapDelete("/items/{id}", [Authorize] async (ApiDbContext db, int id) => 
// {
//     var existItem = await db.Items.FirstOrDefaultAsync(x => x.Id == id);
//     if(existItem == null)
//     {
//         return Results.BadRequest();
//     }

//     db.Items.Remove(existItem);
//     await db.SaveChangesAsync();
//     return Results.NoContent();
// });

app.Run();

record UserDto (string UserName, string Password);